/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type UserStruct = {
  pseudo: PromiseOrValue<string>;
  ipfsLink: PromiseOrValue<string>;
  friends: PromiseOrValue<string>[];
};

export type UserStructOutput = [string, string, string[]] & {
  pseudo: string;
  ipfsLink: string;
  friends: string[];
};

export type MessageStruct = {
  sender: PromiseOrValue<string>;
  sendDate: PromiseOrValue<BigNumberish>;
  message: PromiseOrValue<string>;
};

export type MessageStructOutput = [string, BigNumber, string] & {
  sender: string;
  sendDate: BigNumber;
  message: string;
};

export interface IGiftNetworkInterface extends utils.Interface {
  functions: {
    "addFriend(address)": FunctionFragment;
    "getFriends()": FunctionFragment;
    "getFriendsAsUsers()": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "getUserExists(address)": FunctionFragment;
    "readMessage(address)": FunctionFragment;
    "sendMessage(address,string)": FunctionFragment;
    "setUser(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFriend"
      | "getFriends"
      | "getFriendsAsUsers"
      | "getUser"
      | "getUserExists"
      | "readMessage"
      | "sendMessage"
      | "setUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFriend",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFriends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFriendsAsUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readMessage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUser",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addFriend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFriends", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFriendsAsUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUser", data: BytesLike): Result;

  events: {};
}

export interface IGiftNetwork extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGiftNetworkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFriend(
      _friend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFriends(overrides?: CallOverrides): Promise<[string[]]>;

    getFriendsAsUsers(overrides?: CallOverrides): Promise<[UserStructOutput[]]>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[UserStructOutput]>;

    getUserExists(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    readMessage(
      _from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MessageStructOutput[]]>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUser(
      _pseudo: PromiseOrValue<string>,
      _ipfsLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addFriend(
    _friend: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFriends(overrides?: CallOverrides): Promise<string[]>;

  getFriendsAsUsers(overrides?: CallOverrides): Promise<UserStructOutput[]>;

  getUser(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UserStructOutput>;

  getUserExists(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  readMessage(
    _from: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MessageStructOutput[]>;

  sendMessage(
    _to: PromiseOrValue<string>,
    _message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUser(
    _pseudo: PromiseOrValue<string>,
    _ipfsLink: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFriend(
      _friend: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getFriends(overrides?: CallOverrides): Promise<string[]>;

    getFriendsAsUsers(overrides?: CallOverrides): Promise<UserStructOutput[]>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UserStructOutput>;

    getUserExists(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    readMessage(
      _from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MessageStructOutput[]>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUser(
      _pseudo: PromiseOrValue<string>,
      _ipfsLink: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addFriend(
      _friend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFriends(overrides?: CallOverrides): Promise<BigNumber>;

    getFriendsAsUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserExists(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readMessage(
      _from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUser(
      _pseudo: PromiseOrValue<string>,
      _ipfsLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFriend(
      _friend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFriends(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFriendsAsUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserExists(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readMessage(
      _from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _to: PromiseOrValue<string>,
      _message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUser(
      _pseudo: PromiseOrValue<string>,
      _ipfsLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
