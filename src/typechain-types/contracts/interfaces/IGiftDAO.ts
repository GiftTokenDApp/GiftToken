/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ProposalStruct = {
  id: PromiseOrValue<BigNumberish>;
  initiator: PromiseOrValue<string>;
  creationDate: PromiseOrValue<BigNumberish>;
  closureDate: PromiseOrValue<BigNumberish>;
  proposalType: PromiseOrValue<BigNumberish>;
  description: PromiseOrValue<string>;
  proposalResult: PromiseOrValue<BigNumberish>;
  approvedCount: PromiseOrValue<BigNumberish>;
  refusedCount: PromiseOrValue<BigNumberish>;
  closedDate: PromiseOrValue<BigNumberish>;
};

export type ProposalStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  number,
  string,
  number,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  initiator: string;
  creationDate: BigNumber;
  closureDate: BigNumber;
  proposalType: number;
  description: string;
  proposalResult: number;
  approvedCount: BigNumber;
  refusedCount: BigNumber;
  closedDate: BigNumber;
};

export interface IGiftDAOInterface extends utils.Interface {
  functions: {
    "changeBeneficiary(address,string)": FunctionFragment;
    "createDeclaredBeneficiaryProposal(address,string)": FunctionFragment;
    "createOutpassedRequierementsProposal(string)": FunctionFragment;
    "determinateProposalResult()": FunctionFragment;
    "getProposals()": FunctionFragment;
    "getVote(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeBeneficiary"
      | "createDeclaredBeneficiaryProposal"
      | "createOutpassedRequierementsProposal"
      | "determinateProposalResult"
      | "getProposals"
      | "getVote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeBeneficiary",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeclaredBeneficiaryProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOutpassedRequierementsProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "determinateProposalResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDeclaredBeneficiaryProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOutpassedRequierementsProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determinateProposalResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;

  events: {};
}

export interface IGiftDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGiftDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDeclaredBeneficiaryProposal(
      _beneficiary: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOutpassedRequierementsProposal(
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    determinateProposalResult(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProposals(overrides?: CallOverrides): Promise<[ProposalStructOutput[]]>;

    getVote(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  changeBeneficiary(
    _beneficiary: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDeclaredBeneficiaryProposal(
    _beneficiary: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOutpassedRequierementsProposal(
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  determinateProposalResult(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProposals(overrides?: CallOverrides): Promise<ProposalStructOutput[]>;

  getVote(
    _voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    changeBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createDeclaredBeneficiaryProposal(
      _beneficiary: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOutpassedRequierementsProposal(
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    determinateProposalResult(overrides?: CallOverrides): Promise<void>;

    getProposals(overrides?: CallOverrides): Promise<ProposalStructOutput[]>;

    getVote(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    changeBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDeclaredBeneficiaryProposal(
      _beneficiary: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOutpassedRequierementsProposal(
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    determinateProposalResult(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProposals(overrides?: CallOverrides): Promise<BigNumber>;

    getVote(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDeclaredBeneficiaryProposal(
      _beneficiary: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOutpassedRequierementsProposal(
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    determinateProposalResult(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVote(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
