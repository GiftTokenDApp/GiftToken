/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IGiftNetwork,
  IGiftNetworkInterface,
} from "../../../contracts/interfaces/IGiftNetwork";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_friend",
        type: "address",
      },
    ],
    name: "addFriend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getFriends",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFriendsAsUsers",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "pseudo",
            type: "string",
          },
          {
            internalType: "string",
            name: "ipfsLink",
            type: "string",
          },
          {
            internalType: "address[]",
            name: "friends",
            type: "address[]",
          },
        ],
        internalType: "struct User[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getUser",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "pseudo",
            type: "string",
          },
          {
            internalType: "string",
            name: "ipfsLink",
            type: "string",
          },
          {
            internalType: "address[]",
            name: "friends",
            type: "address[]",
          },
        ],
        internalType: "struct User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getUserExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
    ],
    name: "readMessage",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sendDate",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
        ],
        internalType: "struct Message[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_pseudo",
        type: "string",
      },
      {
        internalType: "string",
        name: "_ipfsLink",
        type: "string",
      },
    ],
    name: "setUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IGiftNetwork__factory {
  static readonly abi = _abi;
  static createInterface(): IGiftNetworkInterface {
    return new utils.Interface(_abi) as IGiftNetworkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IGiftNetwork {
    return new Contract(address, _abi, signerOrProvider) as IGiftNetwork;
  }
}
